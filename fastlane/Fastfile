# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://docs.fastlane.tools/actions
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.19.3"

default_platform :android

platform :android do
  before_all do
    # ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."
  end

  desc "Runs all the tests"
  lane :test do
    gradle(task: "test")
  end

  desc "Submit a new Beta Build to Crashlytics Beta"
  lane :beta do
    gradle(
      task: "assemble",
      build_type: "Release",
      project_dir: "android/"
    )

    apk_path = Actions.lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]
    # Uploads generated apk to Google Play Store as an Alpha build
    supply(
      track: "beta",
      apk: apk_path
      # apk: "android/app/build/outputs/apk/app-release.apk"
    )

    # sh yarn run sentry:upload

  end

  desc "Deploy a new version to the Google Play"
  lane :deploy do
    gradle(task: "assembleRelease")
    supply
  end



  # desc "Builds release version"
  # lane :build do
  #   # Build the release version of the Android App
  #   gradle(
  #     task: "assemble",
  #     build_type: "Release",
  #     project_dir: "android/"
  #   )
  # end

  desc "Submit a new Alpha Build to Google Play Store"
  lane :alpha do
    # Build the release version of the Android App
    gradle(
      task: "assemble",
      build_type: "Release",
      project_dir: "android/"
    )

    apk_path = Actions.lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]

    # Uploads generated apk to Google Play Store as an Alpha build
    supply(
      track: "alpha",
      apk: apk_path
      # apk: "android/app/build/outputs/apk/release/app-release.apk"
    )

  end

  # You can define as many lanes as you want

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end

platform :ios do
  # does not work
  # use XCode for now - https://www.raywenderlich.com/5352-testflight-tutorial-ios-beta-testing
  # TODO: https://github.com/thecodingmachine/react-native-boilerplate/blob/master/docs/beta%20builds.md
  lane :beta do
    # increment_build_number(
    #   build_number: latest_testflight_build_number + 1,
    #   xcodeproj: "./ios/ngkeep.xcodeproj"
    # )
    build_app(scheme: "ngkeep", workspace: "./ios/ngkeep.xcodeproj/project.xcworkspace")
    upload_to_testflight
  end
end

# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://docs.fastlane.tools/actions

# fastlane reports which actions are used
# No personal data is sent or shared. Learn more at https://github.com/fastlane/enhancer
